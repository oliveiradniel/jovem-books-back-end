generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  username  String    @unique
  imagePath String?   @map("image_path")
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  books           Book[]
  collections     Collection[]
  bookCollections BookCollection[]

  @@index([username, email])
  @@map("users")
}

model Book {
  id                String          @id @default(uuid()) @db.Uuid
  userId            String          @map("user_id") @db.Uuid
  title             String
  authors           String[]
  sinopse           String?
  imagePath         String?         @map("image_path")
  numberOfPages     Int?            @map("number_of_pages")
  genreLiterary     GenreLiterary[] @map("genre_literary")
  dateOfPublication DateTime?       @map("date_of_publication")
  createdAt         DateTime        @default(now()) @map("created_at")

  read            Read?
  bookCollections BookCollection[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, title, authors, genreLiterary])
  @@map("books")
}

model Collection {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  bookCollections BookCollection[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId, name])
  @@map("collections")
}

model BookCollection {
  bookId       String   @map("book_id") @db.Uuid
  collectionId String   @map("collection_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at")

  book       Book       @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([bookId, collectionId])
  @@map("book_collections")
}

model Read {
  bookId      String        @unique @db.Uuid
  currentPage Int           @default(1) @map("current_page")
  status      ReadingStatus @default(READING)
  notes       String?
  createdAt   DateTime      @default(now()) @map("created_at")
  finishedAt  DateTime?     @map("finished_at")

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reads")
}

enum GenreLiterary {
  ROMANCE
  SCIENCE_FICTION
  ADVENTURE
  PHILOSOPHY
  DRAMA
  RELIGIOUS
  MYSTERY
  HORROR
  BIOGRAPHY
  HISTORICAL
  FANTASY
  THRILLER
  HUMOR
  CHILDRENS
  YOUNG_ADULT
  POETRY
  ART_AND_DESIGN
  POLITICS
  ECONOMICS
  SELF_HELP
  CRIME
  DYSTOPIAN
  WESTERN
  GOTHIC
  EROTIC
  CYBERPUNK
  STEAMPUNK
  COOKING
  TRAVEL
  SPORTS
  FAIRYTALE
  OTHER
}

enum ReadingStatus {
  READING
  ON_HOLD
  FINISHED
}
